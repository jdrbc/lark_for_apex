?start: class_declaration
			 | enum_declaration
			 | interface_declaration
			 // | trigger_declaration

// interface specific
interface_declaration: annotation_declaration? modifier* INTERFACE name type_parameter_list? extends_class_or_interface? interface_body
interface_body: CURLY_BRACKET_OPEN class_member* CURLY_BRACKET_CLOSE

// class specific
class_declaration: annotation_declaration? modifier* CLASS name type_parameter_list? extends_class_or_interface? implements_interface? class_body
class_body: CURLY_BRACKET_OPEN class_member* CURLY_BRACKET_CLOSE
class_member: enum_declaration
				| class_declaration // inner class
				| interface_declaration // inner interface
				| property_declaration
				| constructor_declaration
				| method_declaration
				| block 
extends_class_or_interface: EXTENDS type
implements_interface: IMPLEMENTS arg_list
constructor_declaration: annotation_declaration? modifier* name [ROUND_BRACKET_OPEN typed_arg_list? ROUND_BRACKET_CLOSE] block
method_declaration: annotation_declaration? modifier* type name ROUND_BRACKET_OPEN typed_arg_list? ROUND_BRACKET_CLOSE (block | SEMICOLON)
property_declaration: annotation_declaration? modifier* type name [SEMICOLON | EQUALS expr SEMICOLON | property_accessors]
property_accessors: CURLY_BRACKET_OPEN [access_modifier? GET (block | SEMICOLON)] [access_modifier? SET (block | SEMICOLON)] CURLY_BRACKET_CLOSE

// enum specific
enum_declaration: access_modifier? ENUM name CURLY_BRACKET_OPEN arg_list CURLY_BRACKET_CLOSE

// modifiers
annotation_declaration: AT_SYMBOL name [ROUND_BRACKET_OPEN [name EQUALS name] ROUND_BRACKET_CLOSE]
modifier: access_modifier 
			| WITH SHARING 
			| WITHOUT SHARING
			| ABSTRACT
			| VIRTUAL
			| OVERRIDE
			| STATIC
			| FINAL
!access_modifier: PUBLIC | PRIVATE | GLOBAL | PROTECTED

// block contents
block: STATIC? CURLY_BRACKET_OPEN statement* CURLY_BRACKET_CLOSE
statement: (expr
				| variable_declaration (COMMA statement)*
				| assignment_statement (COMMA statement)*
				| return_statement
				| do_statement
				| while_statement
				| for_statement
				| switch_statement
				| when_statement
				| if_statement
				| else_statement
				| break_statement
				| continue_statement
				| try_statement
				| throw_statement
			 	| block) SEMICOLON? 
assignment_statement: expr assignment_operator expr
return_statement: RETURN expr? SEMICOLON
do_statement: DO block while_statement SEMICOLON
while_statement: WHILE par_expr statement? block?
for_statement: FOR ROUND_BRACKET_OPEN [statement? SEMICOLON expr? SEMICOLON expr? | expr COLON expr] ROUND_BRACKET_CLOSE statement? block? SEMICOLON?
switch_statement: SWITCH ON expr block
when_statement: WHEN (expr (COMMA expr)* | ELSE) block
if_statement: IF par_expr (statement | block)
else_statement: ELSE statement
break_statement: BREAK SEMICOLON
continue_statement: CONTNUE SEMICOLON
try_statement: try_block catch_clause* finally_clause?
try_block: TRY block
catch_clause: CATCH ROUND_BRACKET_OPEN typed_arg_list ROUND_BRACKET_CLOSE block
finally_clause: FINALLY block
throw_statement: THROW expr SEMICOLON
expr: atom 
		| variable_declaration
		| expr assignment_operator expr
		| prefix_expr
		| postfix_expr
		| logical_expr
		| comparison_expr
		| artimatic_expr
		| bitwise_expr
		| par_expr
		| dml_expr
		| SQUARE_BRACKET_OPEN soql_query_expr SQUARE_BRACKET_CLOSE
		| NEW expr 
		| ROUND_BRACKET_OPEN type ROUND_BRACKET_CLOSE expr // cast
		| expr SQUARE_BRACKET_OPEN arg_list? SQUARE_BRACKET_CLOSE // array index access
		| expr ROUND_BRACKET_OPEN [arg_list | assignment_list] ROUND_BRACKET_CLOSE // constructor
		| expr DOT expr // attribute access
		| expr DOT CLASS // get class
		| expr DOT NEW // Trigger.new
		| expr DOT GET // get object
		| expr DOT SET // set 
		| expr INSTANCE_OF type
		| expr array_initializer
		| expr map_initializer
		| expr QUESTION_MARK expr COLON expr

// =============== SOQL ================		
// https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql_select.htm
soql_query_expr: soql_select_expr soql_from_expr soql_optional_expr? 
soql_optional_expr: soql_where_expr? soql_with_expr? soql_group_by_expr? soql_order_by_expr? soql_limit_expr? soql_offset_expr? soql_for_expr? all_rows?

// soql select
soql_select_expr: SELECT soql_field_list type_of_expr?
type_of_expr: TYPEOF type when_expr+ else_expr? END
when_expr: WHEN type THEN soql_field_list
else_expr: ELSE soql_field_list

// soql from
soql_from_expr: FROM soql_object_type_list soql_using_scope_expr?
soql_using_scope_expr: USING_SCOPE name 

// soql where
soql_where_expr: WHERE soql_condition_expr
soql_condition_expr: soql_field_expr (soql_logical_operator soql_condition_expr)?
soql_field_expr: ROUND_BRACKET_OPEN soql_field_expr ROUND_BRACKET_CLOSE
					| soql_field soql_comparison_operator soql_value
					| soql_field_expr EQUALS soql_field_expr
soql_comparison_operator: EQUALS 
							| LIKE 
							| NOT_EQUALS
							| less_than
							| greater_than
							| LESS_THAN_OR_EQUAL
							| GREATER_THAN_OR_EQUAL
							| IN
							| NOT_IN
							| INCLUDES
							| EXCLUDES
soql_logical_operator: AND | OR | NOT
soql_value: COLON name (DOT name)* // variables 
		| name
		| number
		| string
		| name COLON number // e.g. LAST_N_DAYS:n
		| soql_date_value 
		| soql_date_time_value
soql_date_value: /\d\d\d\d-\d\d-\d\d/
soql_date_time_value: /\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d(Z|((\+|-)\d\d:\d\d))/

// soql with
soql_with_expr: WITH DATA_CATEGORY? soql_filtering_expr
soql_filtering_expr: soql_data_category_selection (AND soql_data_category_selection)*
soql_data_category_selection: soql_data_category [AT_KEYWORD | ABOVE] soql_data_category
soql_data_category: soql_object_type

// soql group by
soql_group_by_expr: GROUP_BY (soql_field_list | ROLLUP soql_field_list | CUBE soql_field_list) soql_having_expression?
soql_having_expression: HAVING soql_having_condition_expression
soql_having_condition_expression: soql_condition_expr 

// soql order by
soql_order_by_expr: ORDER_BY soql_field_list  [NULLS (FIRST|LAST)]
soql_order_by_field_list: soql_field [ASC|DESC] ("," soql_field [ASC|DESC])*

// soql limit
soql_limit_expr: LIMIT number

// soql offset
soql_offset_expr: OFFSET number

// soql for
soql_for_expr: FOR (VIEW | VIEWSTAT | REFERENCE | UPDATE)* ["," soql_tracking_viewstat_list]

// soql update
soql_update_expr: UPDATE soql_tracking_viewstat_list
soql_tracking_viewstat_list: (TRACKING|VIEWSTAT) ("," (TRACKING | VIEWSTAT))

soql_field_list: soql_field_list_item (COMMA soql_field_list_item)* 
soql_field_list_item: soql_field | soql_subquery | soql_aggregate_field
soql_object_type_list: soql_object_type (COMMA soql_object_type)*

soql_object_type: name (DOT soql_object_type)* 
soql_subquery: ROUND_BRACKET_OPEN soql_query_expr ROUND_BRACKET_CLOSE
soql_field: name (DOT soql_field)*
soql_aggregate_field: soql_aggregate_field_avg
soql_aggregate_field_avg: AVG ROUND_BRACKET_OPEN soql_field ROUND_BRACKET_CLOSE
							| COUNT ROUND_BRACKET_OPEN soql_field? ROUND_BRACKET_CLOSE
							| COUNT_DISTINCT ROUND_BRACKET_OPEN soql_field? ROUND_BRACKET_CLOSE
							| MIN ROUND_BRACKET_OPEN soql_field ROUND_BRACKET_CLOSE
							| MAX ROUND_BRACKET_OPEN soql_field ROUND_BRACKET_CLOSE
							| SUM ROUND_BRACKET_OPEN soql_field ROUND_BRACKET_CLOSE

par_expr: ROUND_BRACKET_OPEN expr ROUND_BRACKET_CLOSE
prefix_expr: prefix_operator expr
postfix_expr: expr postfix_operator
logical_expr: expr logical_operator expr
comparison_expr: expr comparison_operator expr
artimatic_expr: expr arithmatic_operator expr
bitwise_expr: expr bitwise_operator expr
dml_expr: dml_operator expr
variable_declaration: FINAL? type name [EQUALS expr]
array_initializer: CURLY_BRACKET_OPEN [expr (COMMA expr)* ] CURLY_BRACKET_CLOSE
map_initializer: CURLY_BRACKET_OPEN map_assignment_list CURLY_BRACKET_CLOSE
atom: type | number | string+

// only supported in old Apex API versions 
type_parameter_list: ANGLE_BRACKET_OPEN type (COMMA type)* ANGLE_BRACKET_CLOSE
typed_arg_list: type name (COMMA type name)*
map_assignment_list: expr ARROW expr (COMMA expr ARROW expr)*
assignment_list: name EQUALS expr (COMMA name EQUALS expr)*
arg_list: expr (COMMA expr)*

type: (name | system_type) type_parameter_list? [SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE] [DOT type]
system_type: SET

// terminals
prefix_operator: PLUS_PLUS
					| MINUS_MINUS
					| EXCL
					| TILDE // Bitwise compliment
					| PLUS // Unary plus
					| MINUS // Unary minus - negate
postfix_operator: PLUS_PLUS
					| MINUS_MINUS
logical_operator: AND_LOGICAL_OPERATOR
					| OR_LOGICAL_OPERATOR
comparison_operator: EQUALS_COMPARE // ==
					| EQUALS_COMPARE_MEM // ===
					| less_than // "<"
					| greater_than // >
					| GREATER_THAN_OR_EQUAL // ">="
					| LESS_THAN_OR_EQUAL //"<="
					| NOT_EQUALS // !=
					| NOT_EQUALS_MEM // "!=="
assignment_operator: EQUALS 
					| PLUS_EQUALS
					| MULTIPLY_EQUALS
					| MINUS_EQUALS
					| DIVIDE_EQUALS
					| BITWISE_OR_ASSIGNMENT_OP
					| BITWISE_AND_ASSIGNMENT_OP
					| BITWISE_XOR_ASSIGNMENT_OP
					| BITWISE_SHIFT_LEFT_ASSIGNMENT_OP
					| BITWISE_SHIFT_RIGHT_ASSIGNMENT_OP
					| BITWISE_SHIFT_RIGHT_UNSIGNED_ASSIGMENT_OP
bitwise_operator: AMP
					| PIPE
					| CARET
					| BITWISE_SHIFT_LEFT
					| bitwise_shift_right
					| bitwise_shift_right_unsigned
dml_operator: DELETE
				| INSERT
				| UNDELETE
				| UPDATE
				| UPSERT
string: /'(.*?(?<!\\))'/
number : /(\d*\.\d*)|\d+/
name : NAME
arithmatic_operator: PLUS | MINUS | DIVIDE | MULTIPLY
PLUS_PLUS: "++"
MINUS_MINUS: "--"
AND_LOGICAL_OPERATOR: "&&"
OR_LOGICAL_OPERATOR: "||"
EXTENDS: "extends"i
IMPLEMENTS: "implements"i
ENUM: "enum"i
WITH: "with"i
WITHOUT: "without"i
SHARING: "sharing"i
ABSTRACT: "abstract"i
VIRTUAL: "virtual"i
OVERRIDE: "override"i
PUBLIC: "public"i
PRIVATE: "private"i
GLOBAL: "global"i
PROTECTED: "protected"i
RETURN: "return"i
DO: "do"i
WHILE: "while"i
FOR: "for"i
SWITCH: "switch"i
ON: "on"i
WHEN: "when"i
IF: "if"i
ELSE: "else"i
BREAK: "break"i
CONTNUE: "continue"i
TRY: "try"i
CATCH: "catch"i
FINALLY: "finally"i
THROW: "throw"i
NEW: "new"i
GET: "get"i
SET: "set"i
FINAL: "final"i
CLASS: "class"i
INTERFACE: "interface"i
INSERT: "insert"i
DELETE: "delete"i
UNDELETE: "undelete"i
UPDATE: "update"i
UPSERT: "upsert"i
STATIC: "static"i
INSTANCE_OF: "instanceof"i
ARROW: EQUALS ANGLE_BRACKET_CLOSE
QUESTION_MARK: "?"
COLON: ":"
DOT: "."
COMMA: ","
TILDE: "~"
MULTIPLY: "*"
DIVIDE: "/"
MINUS: "-"
PLUS: "+"
CARET: "^"
EXCL: "!"
AMP: "&"
PIPE: "|"
SEMICOLON: ";"
EQUALS: "="
EQUALS_COMPARE: "=="
EQUALS_COMPARE_MEM: "==="
NOT_EQUALS: "!="
NOT_EQUALS_MEM: "!=="
PLUS_EQUALS: "+="
MULTIPLY_EQUALS: "*="
MINUS_EQUALS: "-="
DIVIDE_EQUALS: "/="
BITWISE_OR_ASSIGNMENT_OP: "|="
BITWISE_AND_ASSIGNMENT_OP: "&="
BITWISE_XOR_ASSIGNMENT_OP: "^="
bitwise_and: AMP
bitwise_or: PIPE
bitwise_xor: CARET
BITWISE_EXCLUSIVE_OR_ASSIGNMENT_OP: "^="
BITWISE_SHIFT_LEFT_ASSIGNMENT_OP: "<<="
BITWISE_SHIFT_RIGHT_ASSIGNMENT_OP: ">>="
BITWISE_SHIFT_RIGHT_UNSIGNED_ASSIGMENT_OP: ">>>="
BITWISE_SHIFT_LEFT: "<<"
// needs to be this way because of closing type lists
bitwise_shift_right: ANGLE_BRACKET_CLOSE ANGLE_BRACKET_CLOSE 
bitwise_shift_right_unsigned: ANGLE_BRACKET_CLOSE ANGLE_BRACKET_CLOSE ANGLE_BRACKET_CLOSE
greater_than: ANGLE_BRACKET_CLOSE
ANGLE_BRACKET_CLOSE: ">"
less_than: ANGLE_BRACKET_OPEN
LESS_THAN_OR_EQUAL: ">="
GREATER_THAN_OR_EQUAL: "<="
ANGLE_BRACKET_OPEN: "<"
SQUARE_BRACKET_OPEN: "["
SQUARE_BRACKET_CLOSE: "]"
CURLY_BRACKET_OPEN: "{"
CURLY_BRACKET_CLOSE: "}"
ROUND_BRACKET_OPEN: "("
ROUND_BRACKET_CLOSE: ")"
AT_SYMBOL: "@"

// SOQL terminals
SELECT: "SELECT"i
TYPEOF: "TYPEOF"i
// WHEN: "WHEN"i
THEN: "then"i
END: "END"i
FROM: "FROM"i
USING_SCOPE: "USING"i "SCOPE"i
WHERE: "WHERE"i
LIKE: "LIKE"i
NOT: "NOT"i
NOT_IN: NOT IN
IN: "IN"i
INCLUDES: "INCLUDES"i
EXCLUDES: "EXCLUDES"i
AND: "AND"i
OR: "OR"i
// WITH: "WITH"i
DATA_CATEGORY: "DATA"i "CATEGORY"i
AT_KEYWORD: "AT"
ABOVE: "ABOVE"
GROUP_BY: "GROUP"i "BY"i
ROLLUP: "ROLLUP"i 
CUBE: "CUBE"i 
HAVING: "HAVING"i
ORDER_BY: "ORDER"i "BY"i
ASC: "ASC"i
DESC: "DESC"i
NULLS: "NULLS"i
FIRST: "FIRST"i
LAST: "LAST"i
LIMIT: "LIMIT"i
OFFSET: "OFFSET"i
// FOR: "FOR"i
VIEW: "VIEW"i
REFERENCE: "REFERENCE"i
// UPDATE: "UPDATE"i
TRACKING: "TRACKING"i
VIEWSTAT: "VIEWSTAT"i
all_rows: "ALL"i "ROWS"i
AVG: "AVG"i
COUNT: "COUNT"i
COUNT_DISTINCT: "COUNT_DISTINCT"i
MIN: "MIN"i
MAX: "MAX"i
SUM: "SUM"i
      
%import common.CNAME -> NAME
%import common.WS
%ignore WS
COMMENT: /\/\/.*/ 
%ignore COMMENT
ML_COMMENT: /\/\*.*?\*\//sm 
%ignore ML_COMMENT
