?start: class_declaration
			 | enum_declaration
			 // | trigger_declaration
			 // | interface_declaration

// class specific
class_declaration: annotation_declaration? modifier* CLASS name type_parameter_list? extends_class? implements_class? CURLY_BRACKET_OPEN class_member* CURLY_BRACKET_CLOSE
class_member: enum_declaration
				| class_declaration // inner class
				| property_declaration
				| constructor_declaration
				| method_declaration
				| block 
extends_class: EXTENDS name
implements_class: IMPLEMENTS arg_list
constructor_declaration: annotation_declaration? modifier* name [ROUND_BRACKET_OPEN typed_arg_list? ROUND_BRACKET_CLOSE] block
method_declaration: annotation_declaration? modifier* type name ROUND_BRACKET_OPEN typed_arg_list? ROUND_BRACKET_CLOSE (block | SEMICOLON)
property_declaration: annotation_declaration? modifier* type name [SEMICOLON | EQUALS expr SEMICOLON | property_accessors]
property_accessors: CURLY_BRACKET_OPEN [access_modifier? GET (block | SEMICOLON)] [access_modifier? SET (block | SEMICOLON)] CURLY_BRACKET_CLOSE

// enum specific
enum_declaration: access_modifier? ENUM name CURLY_BRACKET_OPEN arg_list CURLY_BRACKET_CLOSE

// modifiers
annotation_declaration: AT name [ROUND_BRACKET_OPEN [name EQUALS name] ROUND_BRACKET_CLOSE]
modifier: access_modifier 
			| WITH SHARING 
			| WITHOUT SHARING
			| ABSTRACT
			| VIRTUAL
			| OVERRIDE
			| STATIC
			| FINAL
!access_modifier: PUBLIC | PRIVATE | GLOBAL | PROTECTED

// block contents
block: STATIC? CURLY_BRACKET_OPEN statement* CURLY_BRACKET_CLOSE
statement: (expr
				| variable_declaration (COMMA statement)*
				| assignment_statement (COMMA statement)*
				| return_statement
				| do_statement
				| while_statement
				| for_statement
				| switch_statement
				| when_statement
				| if_statement
				| else_statement
				| break_statement
				| continue_statement
				| try_statement
				| throw_statement
			 	| block) SEMICOLON? 
assignment_statement: expr assignment_operator expr
return_statement: RETURN expr? SEMICOLON
do_statement: DO block while_statement SEMICOLON
while_statement: WHILE par_expr statement? block?
for_statement: FOR ROUND_BRACKET_OPEN [statement? SEMICOLON expr? SEMICOLON expr? | expr COLON expr] ROUND_BRACKET_CLOSE statement? block? SEMICOLON?
switch_statement: SWITCH ON expr block
when_statement: WHEN (expr (COMMA expr)* | ELSE) block
if_statement: IF par_expr (statement | block)
else_statement: ELSE statement
break_statement: BREAK SEMICOLON
continue_statement: CONTNUE SEMICOLON
try_statement: try_block catch_clause* finally_clause?
try_block: TRY block
catch_clause: CATCH ROUND_BRACKET_OPEN typed_arg_list ROUND_BRACKET_CLOSE block
finally_clause: FINALLY block
throw_statement: THROW expr SEMICOLON
expr: atom 
		| variable_declaration
		| prefix_expr
		| postfix_expr
		| logical_expr
		| comparison_expr
		| artimatic_expr
		| bitwise_expr
		| par_expr
		| dml_expr
		| soql_query_expr
		| NEW expr 
		| ROUND_BRACKET_OPEN type ROUND_BRACKET_CLOSE expr // cast
		| expr SQUARE_BRACKET_OPEN arg_list? SQUARE_BRACKET_CLOSE // array index access
		| expr ROUND_BRACKET_OPEN [arg_list | assignment_list] ROUND_BRACKET_CLOSE // constructor or function call
		| expr DOT expr // attribute access
		| expr DOT CLASS // get class
		| expr DOT GET // get object
		| expr DOT SET // set 
		| expr INSTANCE_OF type
		| expr array_initializer
		| expr map_initializer
		| expr QUESTION_MARK expr COLON expr
// TODO https://developer.salesforce.com/docs/atlas.en-us.soql_sosl.meta/soql_sosl/sforce_api_calls_soql_select.htm
soql_query_expr: /\[SELECT.+FROM.+\]/i
par_expr: ROUND_BRACKET_OPEN expr ROUND_BRACKET_CLOSE
prefix_expr: prefix_operator expr
postfix_expr: expr postfix_operator
logical_expr: expr logical_operator expr
comparison_expr: expr comparison_operator expr
artimatic_expr: expr arithmatic_operator expr
bitwise_expr: expr bitwise_operator expr
dml_expr: dml_operator expr
variable_declaration: FINAL? type name [EQUALS expr]
array_initializer: CURLY_BRACKET_OPEN [expr (COMMA expr)* ] CURLY_BRACKET_CLOSE
map_initializer: CURLY_BRACKET_OPEN map_assignment_list CURLY_BRACKET_CLOSE
atom: type | number | string+

// only supported in old Apex API versions 
type_parameter_list: ANGLE_BRACKET_OPEN type (COMMA type)* ANGLE_BRACKET_CLOSE
typed_arg_list: type name (COMMA type name)*
map_assignment_list: expr ARROW expr (COMMA expr ARROW expr)*
assignment_list: name EQUALS expr (COMMA name EQUALS expr)*
arg_list: expr (COMMA expr)*

type: name type_parameter_list? [SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE] [DOT type]

// terminals
prefix_operator: PLUS PLUS
					| MINUS MINUS
					| EXCL
					| TILDE // Bitwise compliment
					| PLUS // Unary plus
					| MINUS // Unary minus - negate
postfix_operator: PLUS PLUS
					| MINUS MINUS
logical_operator: AMP AMP
					| PIPE PIPE
comparison_operator: EQUALS EQUALS // ==
					| EQUALS EQUALS EQUALS // ===
					| ANGLE_BRACKET_OPEN // "<"
					| ANGLE_BRACKET_CLOSE // >
					| ANGLE_BRACKET_CLOSE EQUALS // ">="
					| ANGLE_BRACKET_OPEN EQUALS //"<="
					| EXCL EQUALS // !=
					| EXCL EQUALS EQUALS // "!=="
assignment_operator: EQUALS 
					| PLUS EQUALS
					| MULTIPLY EQUALS
					| MINUS EQUALS
					| DIVIDE EQUALS
					| PIPE EQUALS
					| AMP EQUALS
					| ANGLE_BRACKET_OPEN ANGLE_BRACKET_OPEN EQUALS // "<<="
					| ANGLE_BRACKET_CLOSE ANGLE_BRACKET_CLOSE EQUALS // ">>="
					| ANGLE_BRACKET_CLOSE ANGLE_BRACKET_CLOSE ANGLE_BRACKET_CLOSE EQUALS // ">>>="
bitwise_operator: AMP
					| PIPE
					| CARET
					| CARET EQUALS
					| ANGLE_BRACKET_OPEN ANGLE_BRACKET_OPEN
					| ANGLE_BRACKET_CLOSE ANGLE_BRACKET_CLOSE
					| ANGLE_BRACKET_CLOSE ANGLE_BRACKET_CLOSE ANGLE_BRACKET_CLOSE
dml_operator: DELETE
				| INSERT
				| UNDELETE
				| UPDATE
				| UPSERT

string: /'(.*?(?<!\\))'/
number : /\d+|(\d*[\.]\d*)/
name : NAME
arithmatic_operator: PLUS | MINUS | DIVIDE | MULTIPLY
EXTENDS: "extends"
IMPLEMENTS: "implements"
ENUM: "enum"
WITH: "with"
WITHOUT: "without"
SHARING: "sharing"
ABSTRACT: "abstract"
VIRTUAL: "virtual"
OVERRIDE: "override"
PUBLIC: "public"
PRIVATE: "private"
GLOBAL: "global"
PROTECTED: "protected"
RETURN: "return"
DO: "do"
WHILE: "while"
FOR: "for"
SWITCH: "switch"
ON: "on"
WHEN: "when"
IF: "if"
ELSE: "else"
BREAK: "break"
CONTNUE: "continue"
TRY: "try"
CATCH: "catch"
FINALLY: "finally"
THROW: "throw"
NEW: "new"
GET: "get"
SET: "set"
FINAL: "final"
CLASS: "class"
INSERT: "insert"
DELETE: "delete"
UNDELETE: "undelete"
UPDATE: "update"
UPSERT: "upsert"
STATIC: "static"
INSTANCE_OF: "instanceof"
ARROW: EQUALS ANGLE_BRACKET_CLOSE
QUESTION_MARK: "?"
COLON: ":"
DOT: "."
COMMA: ","
TILDE: "~"
MULTIPLY: "*"
DIVIDE: "/"
MINUS: "-"
PLUS: "+"
CARET: "^"
EXCL: "!"
AMP: "&"
PIPE: "|"
SEMICOLON: ";"
EQUALS: "="
ANGLE_BRACKET_CLOSE: ">"
ANGLE_BRACKET_OPEN: "<"
SQUARE_BRACKET_OPEN: "["
SQUARE_BRACKET_CLOSE: "]"
CURLY_BRACKET_OPEN: "{"
CURLY_BRACKET_CLOSE: "}"
ROUND_BRACKET_OPEN: "("
ROUND_BRACKET_CLOSE: ")"
AT: "@"
%import common.CNAME -> NAME
%import common.WS
%ignore WS
COMMENT: /\/\/.*/ 
%ignore COMMENT
ML_COMMENT: /\/\*.*?\*\//sm 
%ignore ML_COMMENT
